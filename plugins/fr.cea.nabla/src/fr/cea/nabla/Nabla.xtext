/*******************************************************************************
 * Copyright (c) 2018 CEA
 * This program and the accompanying materials are made available under the 
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 * Contributors: see AUTHORS file
 *******************************************************************************/
 
 
 
// TODO Add keyword size, i.e. size X = 4; (X : DimensionVar). Check only one DimensionVar X.
// TODO Operator definition and overload
// TODO Sirius Graph with composite graph
// TODO Embedded C++ library
// TODO assert



grammar fr.cea.nabla.Nabla with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate nabla "http://www.cea.fr/nabla/Nabla"

NablaModule:
	'module' name=QualifiedName ';'
	imports+=Import*
	('items' '{' items+=ItemType (',' items+=ItemType)* '}'
	connectivities+=Connectivity*)?
	reductions+=Reduction*
	functions+=Function*
	instructions+=(SimpleVarDefinition | VarGroupDeclaration)*
	// Only one block of iteration (don't know how to manage several blocks on node variable X)
	(iteration=TimeIteratorDefinition)?
	jobs+=Job*;

Import: 'with' importedNamespace=QualifiedNameWithWildcard ';';


/* JOBS & INSTRUCTIONS ***********************************/
Job: name=ID ':' instruction=Instruction;
Iterable: Loop | ReductionCall;
Instruction: SimpleVarDefinition | VarGroupDeclaration | InstructionBlock | Loop | Affectation | If | Return;

SimpleVarDefinition: (const?='const')? type=BaseType variable=SimpleVar '=' defaultValue=Expression ';';
VarGroupDeclaration: type=BaseType variables+=Var (',' variables+=Var)* ';';
InstructionBlock: '{' instructions+=Instruction+ '}';
Loop: '\u2200' iterationBlock=IterationBlock ',' body=Instruction;
Affectation: left=ArgOrVarRef '=' right=Expression ';';
If: 'if' '(' condition=Expression ')' then=Instruction (=>'else' else=Instruction)?;
Return: 'return' expression=Expression ';';


/* ITERATEURS ********************************************/
IterationBlock: SpaceIterationBlock | IntervalIterationBlock;
SpaceIterationBlock: range=RangeSpaceIterator (',' singletons+=SingletonSpaceIterator)*;
IntervalIterationBlock: index=SizeTypeSymbol '\u2208' '[' from=SizeType ';' to=SizeType (toIncluded?=']'|'[');

SpaceIterator: RangeSpaceIterator | SingletonSpaceIterator;
RangeSpaceIterator: name=ID '\u2208' container=ConnectivityCall; // must return a collection
SingletonSpaceIterator: name=ID '=' container=ConnectivityCall; // must return a singleton
ConnectivityCall: connectivity=[Connectivity]  '('(args+=SpaceIteratorRef (',' args+=SpaceIteratorRef)*)?')';
SpaceIteratorRef: target=[SpaceIterator] (('+' inc=INT) | ('-' dec=INT))?; // inc/dec only valid on a range

TimeIteratorDefinition: 'iterate' iterators+=TimeIterator (',' iterators+=TimeIterator)* ';';
TimeIterator: name=ID 'while' cond=Expression;
TimeIteratorRef: CurrentTimeIteratorRef | InitTimeIteratorRef | NextTimeIteratorRef;
CurrentTimeIteratorRef: target=[TimeIterator];
InitTimeIteratorRef: target=[TimeIterator] '=' value=INT;
NextTimeIteratorRef: target=[TimeIterator] '+' value=INT;


/* VARIABLES *********************************************/
ArgOrVar: Arg | Var | TimeIterator;
Var: SimpleVar | ConnectivityVar;
SimpleVar: name=ID;
ConnectivityVar: name=ID '{' supports+=[Connectivity] (',' supports+=[Connectivity])* '}';


/* ITEMS & CONNECTIVITES *********************************/
ItemType: name=ID;
Connectivity: 'set' name=ID ':' (inTypes+=[ItemType] ('\u00D7' inTypes+=[ItemType])*)?  '\u2192' returnType=ItemArgType ';';
ItemArgType: multiple?='{' type=[ItemType] '}' | type=[ItemType];


/* FONCTIONS / REDUCTIONS ********************************/
Function: 'def' name=ID ':' (vars+=SizeTypeSymbol (',' vars+=SizeTypeSymbol)* '|')? (inTypes+=BaseType ('\u00D7' inTypes+=BaseType)*)? '\u2192' returnType=BaseType 
	((',' '(' (inArgs+=Arg (',' inArgs+=Arg)*)? ')' '\u2192' body=Instruction) | external?=';');
Reduction: 'def' name=ID ':' (vars+=SizeTypeSymbol (',' vars+=SizeTypeSymbol)* '|')? '(' seed=Expression ',' collectionType=BaseType ')' '\u2192' returnType=BaseType ';';
Arg: name=ID;


/* EXPRESSIONS ******************************************/
Expression: ContractedIf;

ContractedIf returns Expression:
	Or ({ContractedIf.condition=current} '?' then=Or ':' else=Or)*;

Or returns Expression: // on garde l'attribut op pour la validation
	And ({Or.left=current} op='||' right=And)*;

And returns Expression: // on garde l'attribut op pour la validation
	Equality ({And.left=current} op='&&' right=Equality)*;

Equality returns Expression:
	Comparison ({Equality.left=current} op=('=='|'!=') right=Comparison)*;

Comparison returns Expression:
	PlusOrMinus ({Comparison.left=current} op=('>='|'<='|'>'|'<') right=PlusOrMinus)*;

PlusOrMinus returns Expression: // on garde l'attribut op pour la validation
	MulOrDiv ( ({Plus.left=current} op='+' | {Minus.left=current} op='-') right=MulOrDiv)*;

MulOrDiv returns Expression:
	Modulo ({MulOrDiv.left=current} op=('*'|'/') right=Modulo)*;

Modulo returns Expression:
	Primary ({Modulo.left=current} op=('%') right=Primary)*;

Primary returns Expression:
	{Parenthesis} '(' expression=Expression ')' | 
	{UnaryMinus} '-' expression=Primary | 
	{Not} '!' expression=Primary | 
	Atomic;

Atomic returns Expression:
	{IntConstant} value=INT |
	{RealConstant} value=REAL |
	{BoolConstant} (value?='true' | 'false') |
	{MinConstant} type=PrimitiveType '.MinValue' |
	{MaxConstant} type=PrimitiveType '.MaxValue'|
	{FunctionCall} function=[Function|QualifiedName] '(' (args+=Expression (',' args+=Expression)*)? ')' | 
	ReductionCall |
	{BaseTypeConstant} type=BaseType '(' value=Expression ')'| 
	{VectorConstant} '[' values+=Expression (',' values+=Expression)* ']' |
	ArgOrVarRef;

ReductionCall: reduction=[Reduction|QualifiedName] '{' iterationBlock=IterationBlock '}' '(' arg=Expression ')';
ArgOrVarRef: target=[ArgOrVar] 
	('^{' (timeIterators+=NextTimeIteratorRef ',')* timeIterators+=TimeIteratorRef '}')?
	('{' spaceIterators+=SpaceIteratorRef (',' spaceIterators+=SpaceIteratorRef)* '}')? 
	('[' indices+=SizeType (',' indices+=SizeType)? ']')?;


/* TYPES *************************************************/
enum PrimitiveType: Int='\u2115' | Real='\u211D' | Bool='\u213E';
BaseType: primitive=PrimitiveType ('[' sizes+=SizeType (',' sizes+=SizeType)* ']')?;

SizeType: SizeTypeOperation;
SizeTypeOperation returns SizeType:
	SizeTypeAtomic ({SizeTypeOperation.left=current} op=('*'|'+') right=SizeTypeAtomic)*;
SizeTypeAtomic returns SizeType: 
	{SizeTypeInt} value=INT |	// = IntConstant
	{SizeTypeSymbolRef} target=[SizeTypeSymbol];
SizeTypeSymbol: name=ID;


/* DATA TYPE AND TERMINALS *******************************/
QualifiedName: ID ('.' ID)*;
QualifiedNameWithWildcard: QualifiedName '.*'?;

//terminal REAL returns ecore::EDouble: ('0'..'9')+ '.' ('0'..'9')+ ('e'('+'|'-')('0'..'9')+)?;
terminal REAL returns ecore::EDouble: INT '.' (INT (('e'|'E')('+'|'-')INT)?)?;
@Override 
terminal ID: '^'? ('a'..'z'|'A'..'Z'|'\u0391'..'\u03C9'|'\u220F'..'\u221A'|'_') ('a'..'z'|'A'..'Z'|'\u0391'..'\u03C9'|'0'..'9'|'_')*;

