/*
 * generated by Xtext 2.9.0
 */
package fr.cea.nabla.generator

import com.google.inject.Inject
import fr.cea.nabla.generator.ir.Nabla2Ir
import fr.cea.nabla.ir.generator.java.Ir2Java
import fr.cea.nabla.ir.generator.kokkos.Ir2Kokkos
import fr.cea.nabla.ir.generator.n.Ir2N
import fr.cea.nabla.ir.transformers.FillJobHLT
import fr.cea.nabla.ir.transformers.OptimizeConnectivities
import fr.cea.nabla.ir.transformers.ReplaceDefaultValue
import fr.cea.nabla.ir.transformers.ReplaceInternalReduction
import fr.cea.nabla.ir.transformers.ReplaceUtf8
import fr.cea.nabla.nabla.NablaModule
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class NablaGenerator extends AbstractGenerator 
{
	static val IrExtension = 'nablair'
	
	@Inject GeneratorUtils utils
	@Inject SmallLatexGenerator latexGenerator
	@Inject Nabla2Ir nabla2ir
	@Inject Ir2N ir2n
	@Inject Ir2Java ir2java
	@Inject Ir2Kokkos ir2kmds
	val irTransformationSteps = #[new ReplaceUtf8, new ReplaceInternalReduction, new ReplaceDefaultValue, new FillJobHLT, new OptimizeConnectivities]
	
	override doGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) 
	{
		// 1 seul module par resource par définition (cf .xtext)
		val module = input.contents.filter(NablaModule).head
		val fileNameWithoutExtension = module.name.toLowerCase + '/' + module.name

		// ecriture du fichier de modele
		if (!module.jobs.empty)
		{
			println('Generating Latex document')
			fsa.generateFile(fileNameWithoutExtension.addExtension('tex'), latexGenerator.getLatexContent(module))
			
			println('Serializing Nabla Intermediate Representation')
			val irModule = nabla2ir.toIrModule(module)
			var i=0
			
			for (transformationStep : irTransformationSteps)
			{
				i++
				println('IR->IR: ' + transformationStep.description)
				transformationStep.transform(irModule)
				//createAndSaveResource(fsa, input.resourceSet, fileNameWithoutExtension.addExtension(i + '.' + IrExtensions), irModule)		
			}

			createAndSaveResource(fsa, input.resourceSet, fileNameWithoutExtension.addExtension(IrExtension), irModule)

			// génération du fichier .n
			println('Generating IR --> Nabla V1 (.n)')
			val nContent = ir2n.getFileContent(irModule)
			fsa.generateFile(fileNameWithoutExtension.addExtension('n'), nContent)
	
			// génération du fichier .java
			println('Generating IR --> Java (.java)')
			val javaContent = ir2java.getFileContent(irModule)
			fsa.generateFile(fileNameWithoutExtension.addExtension('java'), javaContent)	

			// génération du fichier .kokkos
			println('Generating IR --> Kokkos (.cpp)')
			val kmdsContent = ir2kmds.getFileContent(irModule)
			fsa.generateFile((fileNameWithoutExtension + 'Kokkos').addExtension('cpp'), kmdsContent)	
		}
	}
	
//	private def getFileExtension(int passNumber) { 'pass' + passNumber + '.' + IrExtension }
	
	private def addExtension(String fileNameWithoutExtension, String fileExtension)
	{
		fileNameWithoutExtension + '.' + fileExtension
	} 
		
	/** Crée et sauve la resource au même endroit que le paramètre baseResource en changeant l'extension par newExtension */
	private def createAndSaveResource(IFileSystemAccess2 fsa, ResourceSet rSet, String fileName, EObject content)
	{
		val uri = fsa.getURI(fileName)
		val resource = rSet.createResource(uri)
		resource.contents += content
		resource.save(utils.xmlSaveOptions)
	}
}
