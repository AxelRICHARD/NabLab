/*******************************************************************************
 * Copyright (c) 2018 CEA
 * This program and the accompanying materials are made available under the 
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 * 	Benoit Lelandais - initial implementation
 * 	Marie-Pierre Oudot - initial implementation
 * 	Jean-Sylvain Camier - Nabla generation support
 *******************************************************************************/
grammar fr.cea.nabla.Nabla with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate nabla "http://www.cea.fr/nabla/Nabla"

NablaModule:
	'module' name=QualifiedName ';'
	imports+=Import*
	('items' '{' items+=ItemType (',' items+=ItemType)* '}'
	'connectivities' '{' connectivities+=Connectivity* '}')?
	('functions' '{' functions+=(Function | Reduction)* '}')?
	variables+=(ScalarVarDefinition | VarGroupDeclaration)*
	jobs+=Job*;

Import: 'with' importedNamespace=QualifiedNameWithWildcard ';';

/* ITEMS *************************************************/
ItemType:
	name=ID;

/* JOBS **************************************************/
Job: name=ID ':' instruction=Instruction;

/* INSTRUCTIONS ******************************************/
Instruction: 
	ScalarVarDefinition |
	VarGroupDeclaration | // only scalar variables (ScalarVar type)
	{InstructionBlock} '{' instructions+=Instruction+ '}' |
	{Affectation} varRef=VarRef '=' expression=Expression ';' |
	{Loop} '\u2200' range=RangeSpaceIterator (',' singletons+=SingletonSpaceIterator)* ',' body=Instruction |
	{If} 'if' '(' condition=Expression ')' then=Instruction (=>'else' else=Instruction)?;

/* ITERATEURS ********************************************/
SpaceIterator: RangeSpaceIterator | SingletonSpaceIterator;
RangeSpaceIterator: name=ID '\u2208' container=ConnectivityCall; // must return a collection
SingletonSpaceIterator: name=ID '=' container=ConnectivityCall; // must return a singleton
ConnectivityCall: connectivity=[Connectivity]  '('(args+=SpaceIteratorRef (',' args+=SpaceIteratorRef)*)?')';
SpaceIteratorRef: target=[SpaceIterator] (('+' inc=INT) | ('-' dec=INT))?; // inc/dec only valid on a range

/* VARIABLES ********************************************/
ScalarVarDefinition: (const?='const')? type=BasicType variable=ScalarVar '=' defaultValue=Expression ';';
VarGroupDeclaration: type=BasicType variables+=Var (',' variables+=Var)* ';';
Var: ScalarVar | ArrayVar;
ScalarVar: name=ID;
ArrayVar: name=ID '[' dimensions+=[Connectivity] (',' dimensions+=[Connectivity])* ']';

/* CONNECTIVITES *****************************************/
Connectivity: name=ID ':' '(' ((inTypes+=[ItemType] (',' inTypes+=[ItemType])*) | '\u2205') ')' '\u2192' returnType=ItemArgType ';';
ItemArgType: multiple?='{' type=[ItemType] '}' | type=[ItemType];

/* FONCTIONS / REDUCTIONS ********************************/
Function: name=ID ':' argGroups+=FunctionArg (',' argGroups+=FunctionArg)* ';';
FunctionArg: '(' ((inTypes+=BasicType (',' inTypes+=BasicType)*) | '\u2205') ')' '\u2192' returnType=BasicType;
Reduction: name=ID ':' argGroups+=ReductionArg (',' argGroups+=ReductionArg)* ';';
ReductionArg:  '(' seed=Expression ',' collectionType=BasicType ')' '\u2192' returnType=BasicType;

/* EXPRESSIONS ******************************************/
Expression: ContractedIf;

ContractedIf returns Expression:
	Or ({ContractedIf.condition=current} '?' then=Or ':' else=Or)*;

Or returns Expression: // on garde l'attribut op pour la validation
	And ({Or.left=current} op='||' right=And)*;

And returns Expression: // on garde l'attribut op pour la validation
	Equality ({And.left=current} op='&&' right=Equality)*;

Equality returns Expression:
	Comparison ({Equality.left=current} op=('=='|'!=') right=Comparison)*;

Comparison returns Expression:
	PlusOrMinus ({Comparison.left=current} op=('>='|'<='|'>'|'<') right=PlusOrMinus)*;

PlusOrMinus returns Expression: // on garde l'attribut op pour la validation
	MulOrDiv ( ({Plus.left=current} op='+' | {Minus.left=current} op='-') right=MulOrDiv)*;

MulOrDiv returns Expression:
	Modulo ({MulOrDiv.left=current} op=('*'|'/') right=Modulo)*;

Modulo returns Expression:
	Primary ({Modulo.left=current} op=('%') right=Primary)*;

Primary returns Expression:
	{Parenthesis} '(' expression=Expression ')' | 
	{UnaryMinus} '-' expression=Primary | 
	{Not} '!' expression=Primary | 
	Atomic;

Atomic returns Expression:
	{IntConstant} value=INT |
	{RealConstant} value=REAL |
	Real2Constant |
	Real3Constant |
	{BoolConstant} (value?='true' | 'false') |
	{Real2x2Constant} '{' x=Real2Constant ',' y=Real2Constant '}' |
	{Real3x3Constant} '{' x=Real3Constant ',' y=Real3Constant ',' z=Real3Constant '}' |
	{RealXCompactConstant} type=BasicType '(' value=REAL ')' |
	{MinConstant} type=BasicType '.MinValue' |
	{MaxConstant} type=BasicType '.MaxValue' |
	{FunctionCall} function=[Function|QualifiedName] '(' (args+=Expression (',' args+=Expression)*)? ')' | 
	{ReductionCall} reduction=[Reduction|QualifiedName] '{' range=RangeSpaceIterator (',' singletons+=SingletonSpaceIterator)* '}' '(' arg=Expression ')' |
	VarRef;

Real2Constant: '{' x=REAL ',' y=REAL '}';
Real3Constant: '{' x=REAL ',' y=REAL ',' z=REAL '}';
VarRef: variable=[Var] 
	('{' spaceIterators+=SpaceIteratorRef (',' spaceIterators+=SpaceIteratorRef)* '}')? 
	('^{' timeIterator=TimeIterator '}')?  
	('.' fields+=ID)*;

TimeIterator: 
	{InitTimeIterator} 'n=0' | 
	{NextTimeIterator} 'n+1' (hasDiv?='/' div=INT)?;

/* ENUMS *************************************************/
enum BasicType: 
	Int='\u2115' |
	Real='\u211D' |
	Real2='\u211D\u00B2' |
	Real2x2='\u211D\u00B2\u02E3\u00B2' |
	Real3='\u211D\u00B3' |
	Real3x3='\u211D\u00B3\u02E3\u00B3' |
	Bool='\u213E';

/* DATA TYPE *********************************************/
QualifiedName: ID ('.' ID)*;
QualifiedNameWithWildcard: QualifiedName '.*'?;


/* TERMINAUX *********************************************/
@Override 
terminal ID: '^'? ('a'..'z'|'A'..'Z'|'\u0394'..'\u03F2'|'\u220F'..'\u221C'|'_') ('a'..'z'|'A'..'Z'|'\u0394'..'\u03F2'|'0'..'9'|'\u2211'|'_')*;
terminal REAL returns ecore::EDouble: ('0'..'9')+ '.' ('0'..'9')+ ('e'('+'|'-')('0'..'9')+)?;
