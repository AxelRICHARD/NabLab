/*******************************************************************************
 * Copyright (c) 2018 CEA
 * This program and the accompanying materials are made available under the 
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 * 	Benoit Lelandais - initial implementation
 * 	Marie-Pierre Oudot - initial implementation
 * 	Jean-Sylvain Camier - Nabla generation support
 *******************************************************************************/
module Height;

connectivities {
	cells: (∅) → {cell};
	outerSouthCells: (∅) → {cell};
	outerNorthCells: (∅) → {cell};
	outerEastCells: (∅) → {cell};
	outerWestCells: (∅) → {cell};
	upCell: (cell) → cell;
	downCell: (cell) → cell;
	leftCell: (cell) → cell;
	rightCell: (cell) → cell;
}

const ℕ MAX_INLET_NB 			= 9201;
const ℾ option_fill				= false;

ℝ hn[cells];					// deja dans depth
ℝ h[cells], hnp[cells];			// height
ℝ inlet[MAX_INLET_NB];


IniOuterWestHn: ∀j∈outerWestCells(), hn{j} = inlet{0};
IniInnerHn: ∀j∈cells(), if (option_fill) { hn{j} = refill(uid); }

∀ outer ~west cells outerNotWestCellsHeight @ -13 { ∀ outer south face hn=hn[↑]; }
∀ outer ~west cells @ -13 { ∀ outer north faces hn=hn[↓]; }
∀ outer ~west cells @ -11 { ∀ outer east faces hn=hn[←]; }
∀ outer ~west cells @ -11 { ∀ outer west faces hn=hn[→]; }

/*∀ cells @ -11 {
  if (uid==0) printf("\n[33m[height ini] hn:[m");
  if ((uid%X_EDGE_ELEMS)==0) printf("\n");
  printf(" %.12f",hn);
  if (uid==(X_EDGE_ELEMS*Y_EDGE_ELEMS-1)) printf("\n[m");
  }*/

iniHMax @ -17 { hmax=-∞;}
∀ inner cells @ -9 { hmax = fmax(hn,hmax); }
iniMaxWaterHeight @ -7 { hmax0=fmax(hmax,hmax_bound);}

// ***************************************************************************
// * Compute loop
// ***************************************************************************
iniHmax @ 0 { hmax=-∞; }
∀ inner cells @ 1 { hmax = fmax(hn,hmax); }

/*∀ cells @ 1 {
  if (uid==0) printf("\n[33m[height] hn:[m");
  if ((uid%X_EDGE_ELEMS)==0) printf("\n");
  printf(" %.12f",hn);
  if (uid==(X_EDGE_ELEMS*Y_EDGE_ELEMS-1)) printf("\n[m");
  }*/

∀ inner cells @ 1.2 {
  const ℝ dhr=(un>0.0)?d_hn:d_hn[→];
  const ℝ dhl=(un[←]>0.0)?d_hn[←]:d_hn;
  deqh_dx = (un*dhr-un[←]*dhl)*inv_dx;
}

/*∀ cells @ 1.23 {
  if (uid==0) printf("\n[33m[deqh_dx] deqh_dx:[m");
  if ((uid%X_EDGE_ELEMS)==0) printf("\n");
  printf(" %.12f",deqh_dx);
  if (uid==(X_EDGE_ELEMS*Y_EDGE_ELEMS-1)) printf("\n[m");
  }*/

∀ inner cells @ 1.2 {
  const ℝ dhu=(vn>0.0)?d_hn:d_hn[↑];
  const ℝ dhd=(vn[↓]>0.0)?d_hn[↓]:d_hn;
  deqh_dy = (vn*dhu-vn[↓]*dhd)*inv_dy;
}

/*∀ cells @ 1.23 {
  if (uid==0) printf("\n[33m[deqh_dy] deqh_dy:[m");
  if ((uid%X_EDGE_ELEMS)==0) printf("\n");
  printf(" %.12f",deqh_dy);
  if (uid==(X_EDGE_ELEMS*Y_EDGE_ELEMS-1)) printf("\n[m");
  }*/

∀ inner cells @ 1.21 { deqh = deqh_dx + deqh_dy; }

∀ outer cells @ 1.22 { hnp = hn; }
∀ inner cells @ 1.23 { hnp = hn - δt*deqh; }


∀ inner cells @ 1.3 { hn = hnp; }


// ***************************************************************************
// * HN read INLETs
// ***************************************************************************
∀ outer west cells @ 7.0 { // Lecture et application des inlet à l'ouest
  //info()<<"[outer west cells]  Lecture et application des inlet à l'ouest, iteration="<<iteration;
  hn=inlet[(iteration-1)%MAX_INLET_NB];
}
//loopHnFill6 @ 7.1 if (option_fill) { fill(hn); }
∀ cells @ 7.1 if (option_fill) { hn=refill(uid); }

// ***************************************************************************
// * HN Boundaries
// ***************************************************************************
∀ outer ~west cells @ 7.2 { ∀ outer south face hn=hn[↑]; }
∀ outer ~west cells @ 7.2 { ∀ outer north face hn=hn[↓]; }
∀ outer ~west cells @ 7.2 { ∀ outer east faces hn=hn[←]; }
∀ outer ~west cells @ 7.2 { ∀ outer west faces hn=hn[→]; }

// ***************************************************************************
// * H for output
// ***************************************************************************
IniH: ∀j∈cells(), h{j} = hn{j};
IniOuterSouthH: ∀j∈outerSouthCells(), h{j} = -hn{upCell(j)};
IniOuterNorthH: ∀j∈outerNorthCells(), h{j} = -hn{downCell(j)};
IniOuterEastH:  ∀j∈outerEastCells(),  h{j} = -hn{leftCell(j)};
IniOuterWestH:  ∀j∈outerWestCells(),  h{j} = -hn{rightCell(j)};

