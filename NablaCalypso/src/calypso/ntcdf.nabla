/*******************************************************************************
 * Copyright (c) 2018 CEA
 * This program and the accompanying materials are made available under the 
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 * 	Benoit Lelandais - initial implementation
 * 	Marie-Pierre Oudot - initial implementation
 * 	Jean-Sylvain Camier - Nabla generation support
 *******************************************************************************/
module Ntcdf;


// ****************************************************************************
// * Lecture du fichier 'depth'
// ****************************************************************************
NetcdfReadBath: {
  ℕ ncid = 0;
  ℕ ndims, nvars, natts, unlimdimid;
  char depthXxY[1024];
  sprintf(depthXxY,"./data/depth%dx%d.nc",NX,NY);  
  if (nc_open(depthXxY,NC_WRITE,&ncid)!=NC_NOERR){
    printf("\n[1;31mCould not find '%s' file[m\n", depthXxY);
    return;
  }
  debug()<<"[39m[NetCDF] read info, filename='"<<depthXxY<<"'[m";
  // inquiring the IDs of dims x and y
  if (nc_inq(ncid, &ndims, &nvars, &natts, &unlimdimid)!=NC_NOERR) return;
  assert(nvars==3);
  assert(natts==0);
  assert(unlimdimid==-1);
  size_t len[4]={0,0,0,0};
  char name[NC_MAX_NAME];
  for(ℕ i=0;i<ndims;i+=1)
    if (nc_inq_dim(ncid, i, name, &len[i])!=NC_NOERR) return;
  // Récupération des 'x'
  if (nc_inq_varname(ncid, 0, name)!=NC_NOERR) return;
  assert(name[0]=='x');
  _x_=(ℝ*)calloc(len[0],sizeof(ℝ));
  _y_=(ℝ*)calloc(len[1],sizeof(ℝ));
  _z_=(ℝ*)calloc(len[2]*len[3],sizeof(ℝ));
  if (nc_get_var_double(ncid,0,_x_)!=NC_NOERR) return;
  // Récupération des 'y'
  if (nc_inq_varname(ncid, 1, name)!=NC_NOERR) return;
  assert(name[0]=='y');
  if (nc_get_var_double(ncid, 1, _y_)!=NC_NOERR) return;
  // Récupération des 'z'  
  if (nc_inq_varname(ncid, 2, name)!=NC_NOERR) return;
  assert(name[0]=='z');
  if (nc_get_var_double(ncid, 2, _z_)!=NC_NOERR) return;
  // Closes the open netCDF dataset
  if (nc_close(ncid)!=NC_NOERR) return;
  debug()<<"[39m[NetCDF] done[m";
}

int ix,iy,iz;
iniIdx @ -19.99 {ix=iy=iz=0;}

∀ inner cells @ -19.99 {
  const ℕ k = ix++%X_EDGE_ELEMS;
  //info()<<"[35m[iniX] iy="<<iy<<", k="<<k<<"[m";
  x=_x_[k];
}
∀ cells @ -19.99 {
  const ℕ k = iy++/X_EDGE_ELEMS-1;
  if (k<0) continue;
  //info()<<"[35m[iniY] iy="<<iy-1<<", k="<<k<<"[m";
  y=_y_[k];
}
∀ inner cells @ -19.99 { z=_z_[iz++];}
∀ outer cells @ -19.99 { z=-0.0;}


// ****************************************************************************
// * Lecture du fichier 'inlet'
// ****************************************************************************
read_water_inlet @ -20.0 {
  ℝ tm;
  FILE *stream=fopen("./data/inlet.data", "r");
  assert(stream);
  info()<<"[37m[boundary] Water inlet file[m";
  hmax_bound=0.0;
  for(ℕ k=0;k<MAX_INLET_NB;k+=1){
    if (fscanf(stream,"%lf %lf", &tm,&inlet[k])!=2) return;
    hmax_bound=fmax(hmax_bound,inlet[k]);
  }
  fclose(stream);
}


// ***************************************************************************
// * refill
// ***************************************************************************
int kReFill=0;
ℝ refill(const ℕ offset){
  if (offset==0) kReFill=0;
  const ℕ k= kReFill++;
  const ℕ i = (k%X_EDGE_ELEMS)+1;
  const ℕ j = (k/X_EDGE_ELEMS)+1;
  ℝ data = 0.0;
  data =  i / (1.0e+1 + i) / (1.0e+2 + i) / (1.0e+3 + i) / (1.0e+10 + i) / (1.0e+11 + i) / 1.0e+12;
  data += j / (1.0e+4 + j) / (1.0e+5 + j) / (1.0e+6 + j) / (1.0e+7 + j) / (1.0e+8 + j) / 1.0e+9;
  return data;
}