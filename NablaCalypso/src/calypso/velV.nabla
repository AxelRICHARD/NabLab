/*******************************************************************************
 * Copyright (c) 2018 CEA
 * This program and the accompanying materials are made available under the 
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 * 	Benoit Lelandais - initial implementation
 * 	Marie-Pierre Oudot - initial implementation
 * 	Jean-Sylvain Camier - Nabla generation support
 *******************************************************************************/
module VelV;

with Math.*;
with Calypso.*;

connectivities {
	cells: (∅) → {cell};
}

// ****************************************************************************
// * Options
// ****************************************************************************
const ℾ option_fill				= false;

// ****************************************************************************
// * Cells
// ****************************************************************************
ℝ x[cells], dx[cells];
ℝ y[cells], dy[cells];
ℝ z[cells], d[cells], d_hn[cells];	// depth
ℝ h[cells], hn[cells], hnp[cells];	// height
ℝ un[cells], unp[cells];			// velocity X
ℝ vn[cells], vnp[cells];   			// velocity Y

//iniVnFill6 @ -8.8 if (option_fill) { fill(vn); }
IniVnFill: ∀j∈cells(), if (option_fill) { vn=refill(uid); }

∀ outer cells @ -8.7 { ∀ outer west faces vn=vn[→]; }
∀ outer cells @ -8.7 { ∀ outer east faces vn=vn[←]; }

∀ outer south cells @ -8.7 { vn=0.0; }
∀ outer north cells @ -8.7 { vn=0.0; }
∀ inner north cells @ -8.7 { vn=0.0; }

/*∀ cells @ -8.7 {
  if (uid==0) printf("\n[33m[V ini] vn:[m");
  if ((uid%X_EDGE_ELEMS)==0) printf("\n");
  printf(" %.12f",vn);
  if (uid==(X_EDGE_ELEMS*Y_EDGE_ELEMS-1)) printf("\n[m");
  }*/

∀ inner cells nlsw1_eqV @ -3.4 {
  const ℝ tu = ¼*(un[←]+un+un[↖]+un[↑]);
  const ℝ vl = (tu>0)?vn:vn[→];
  const ℝ vr = (tu>0)?vn[←]:vn;
  const ℝ vu = (vn>0)?vn:vn[↑];
  const ℝ vd = (vn>0)?vn[↓]:vn;
  const ℝ tv1 = tu*(vl-vr);
  const ℝ tv2 = vn*(vu-vd);
  const ℝ thv = GZ*(hn[↑]-hn);
  const ℝ tfc = tu*fc;
  const ℝ deqv = tv1*inv_dx + (tv2+thv)*inv_dy + tfc;
  vnp = vn - ½*δt*deqv;
}

∀ inner north cells @ -3.35 { vnp=0.0; }

/*∀ cells @ -3.35 {
  if (uid==0) printf("\n[33m[Vnp ini] vnp:[m");
  if ((uid%X_EDGE_ELEMS)==0) printf("\n");
  printf(" %.12f",vnp);
  if (uid==(X_EDGE_ELEMS*Y_EDGE_ELEMS-1)) printf("\n[m");
  }*/

iniVMinMax @ -4.0 { vmin=+∞; vmax=-∞;}
∀ inner cells @ -3.9{
  vmin = fmin(vn,vmin);
  vmax = fmax(vn,vmax);
}

∀ inner cells ini_update_vn @ -3 { vn = vnp; }


// ***************************************************************************
// * Compute loop
// ***************************************************************************

∀ outer cells @ 2.0 { vnp=0.0; }

∀ inner cells @ 2.0 {
  const ℝ tu = ¼*(un[←]+un+un[↖]+un[↑]);
  const ℝ vl = (tu>0.0)?vn:vn[→];
  const ℝ vr = (tu>0.0)?vn[←]:vn;
  const ℝ vu = (vn>0.0)?vn:vn[↑];
  const ℝ vd = (vn>0.0)?vn[↓]:vn;
  const ℝ tv1 = tu*(vl-vr);
  const ℝ tv2 = vn*(vu-vd);
  const ℝ thv = GZ*(hn[↑]-hn);
  const ℝ tfc = tu*fc;
  const ℝ deqv = tv1*inv_dx + (tv2+thv)*inv_dy + tfc;
  vnp = vn - δt*deqv;
}

//∀ inner north cells @ 2.1 { vnp=0.0; }

∀ inner cells @ 2.2 { // Runup
  const ℝ ε = option_epsd;
  const ℝ coef_grad_h = coef_grady_h;
  const ℾ dorh = d_hn[↑]<ε or hn[↑]<-d;
  const ℾ vorh = vnp<0.0 and hn[↑]>hn;
  vnp=(d_hn<ε and dorh)?0.0:(d_hn<ε and vorh)?vnp-coef_grad_h*(hn+d[↑]):vnp;
  if (d_hn[↑] < ε){
    if (hn < -d[↑]) vnp = 0.0;
    if (vnp>0.0 and hn>hn[↑]) vnp += coef_grad_h*(hn[↑]+d);
    continue;
  }
  if (vnp>0.0){
    if (-d>hn[↑]) vnp += coef_grad_h*(hn[↑]+d);
    if (-d[↑]>hn) vnp -= coef_grad_h*(hn+d[↑]);
  }
}

∀ inner cells @ 3 { vn = vnp; }

// ***************************************************************************
// * VN Boundaries
// ***************************************************************************
∀ outer cells @ 7.2 { ∀ outer west faces vn=vn[→]; }
∀ outer cells @ 7.2 { ∀ outer east faces vn=vn[←]; }

//∀ outer south cells @ 7.2 { vn=0.0; }
∀ outer north cells @ 7.2 { vn=0.0; }
∀ inner north cells @ 7.2 { vn=0.0; }

/*∀ cells @ 7.3 {
  if (uid==0) printf("\n[33m[Vn Boundaries] vn:[m");
  if ((uid%X_EDGE_ELEMS)==0) printf("\n");
  printf(" %.12f",vn);
  if (uid==(X_EDGE_ELEMS*Y_EDGE_ELEMS-1)) printf("\n[m");
  }*/