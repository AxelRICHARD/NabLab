module Calypso;

with Math.*;

connectivities {
	cells: (‚àÖ) ‚Üí {cell};
}

// ****************************************************************************
// * Physical Constants
// ****************************************************************************
const ‚Ñù GZ = 9.81;           // AccelerationDueToGravity is 9.80665 m/s¬≤

// ****************************************************************************
// * Options
// ****************************************************************************
const ‚Ñï NX						= 64;      // Number of inner X cells
const ‚Ñï NY						= 48;      // Number of inner Y cells
const ‚Ñù LENGTH					= 1.0;
const ‚Ñï X_EDGE_ELEMS			= NX + 2;    // Inner + Fictitious X cells
const ‚Ñï Y_EDGE_ELEMS			= NY + 2;    // Inner + Fictitious Y cells
const ‚Ñù option_stoptime			= 60.0;
const ‚Ñï option_max_iterations	= 8;
const ‚Ñù option_eps_fp			= 1.0 / ‚Ñù.MaxValue;
const ‚Ñù option_epsd				= 1.0e-9;
const ‚Ñù option_time_step		= 0.0025;
const ‚Ñù option_cfl_max			= 0.25;
const ‚Ñæ option_fill				= false;
const ‚Ñæ option_debug				= false;
const ‚Ñæ option_arcane			= false;

// ****************************************************************************
// * Cells
// ****************************************************************************
‚Ñù x[cells], dx[cells];
‚Ñù y[cells], dy[cells];
‚Ñù z[cells], d[cells], d_hn[cells];	// depth
‚Ñù h[cells], hn[cells], hnp[cells];	// height
‚Ñù un[cells], unp[cells];			// velocity X
‚Ñù vn[cells], vnp[cells];   			// velocity Y
‚Ñù deqh[cells], deqh_dx[cells], deqh_dy[cells];
‚Ñù coef_gradx_h[cells], coef_grady_h[cells];
‚Ñù fc[cells];						// Coriolis force

// ***************************************************************************
// * Globals
// ***************************************************************************
‚Ñù inv_dx,inv_dy;
‚Ñù xmin,xmax;
‚Ñù ymin,ymax;
‚Ñù hmax_bound,hmax,hmax0;
‚Ñù dmax,dxmax,inv_dx_max,dymax,inv_dy_max;
‚Ñù umax,umin,vmax,vmin;
‚Ñù cfl;
‚Ñù dx_lon, dy_lat;
‚Ñù dxy_min;
‚Ñï chkH,chkU,chkV;


// ***************************************************************************
// * Initialisation part
// ***************************************************************************

// netcdf @ -20.0

// read_water_inlet @ -20.0
Initd: ‚àÄj‚ààcells(), d{j} = -z{j};
ComputeXMin: xmin = reduceMin{j‚ààcells()}(x{j});
ComputeXMax: xmax = reduceMax{j‚ààcells()}(x{j});
ComputeYMin: ymin = reduceMin{j‚ààcells()}(y{j});
ComputeYMax: ymax = reduceMax{j‚ààcells()}(y{j});

ComputeDxLon: dx_lon = (xmax-xmin) / (NX-1);
ComputeDyLat: dy_lat = (ymax-ymin) / (NY-1);

GeogrToCartDx: ‚àÄj‚ààcells(), dx{j} = lon_to_m(dx_lon, y{j});
GeogrToCartDy: ‚àÄj‚ààcells(), dy{j} = lat_to_m(dy_lat);

ComputeDxMax: dxmax = reduceMax{j‚ààcells()}(dx{j});
ComputeDyMax: dymax = reduceMax{j‚ààcells()}(dy{j});

IniInvDx: ‚àÄj‚ààcells(), inv_dx = 1.0 / dx{j};
IniInvDy: ‚àÄj‚ààcells(), inv_dy = 1.0 / dy{j};

IniCoefGradxH: ‚àÄj‚ààcells(), coef_gradx_h{j} = option_time_step * GZ / dx{j};
IniCoefGradyH: ‚àÄj‚ààcells(), coef_grady_h{j} = option_time_step * GZ / dy{j};

SpaceSchemeInitCoriolis: ‚àÄj‚ààcells(), {
	const ‚Ñù PI = acos(-1.0);
	const ‚Ñù T_SIDEREAL = 86164.1;
	const ‚Ñù Œ©T = 2.0*PI/T_SIDEREAL;
	const ‚Ñù dŒ©t = 2.0*Œ©T;
	fc = dŒ©t * sin(deg_to_rad(y{j}));
}

TimeSchemeCfl: {
	const ‚Ñù cgmax = ‚àö(GZ*(dmax+hmax0));
	const ‚Ñù cumax = fmax(fabs(umax),fabs(umin))+cgmax;
	const ‚Ñù cvmax = fmax(fabs(vmax),fabs(vmin))+cgmax;
  inv_dx_max = 1.0/dxmax;
  inv_dy_max = 1.0/dymax;
  Œ¥t=option_time_step;
  cfl = fmax(Œ¥t*cumax*inv_dx_max, Œ¥t*cvmax*inv_dy_max);
  info()<< "[33m[time_scheme_cfl] cfl="<<cfl<<"[m";
  /*if (!option_arcane)*/ assert(Œ¥t<cfl);
  dxy_min = 1.0/fmax(inv_dx_max,inv_dy_max);
}


// ***************************************************************************
// * Compute loop
// ***************************************************************************

model_iterate @ 0.0 if (!(iteration%1024)) {
  printf("\n[1;35m[ %d ] t=%.5fs, hmax = %0.11f[m",iteration,time,hmax);
}


// ***************************************************************************