//resolution numerique de l'equation des ondes
//on passe directement en 2D

module MyModule;

with Math.*;
with LinearAlgebra.*;


itemtypes { node , cell}

set nodes: → {node};
set cells: → {cell};

set neighbourCells: cell → {cell};
set nodesOfCell: cell → {node};

option ℝ X_EDGE_LENGTH = 2.0;
option ℝ Y_EDGE_LENGTH = X_EDGE_LENGTH;
option ℕ X_EDGE_ELEMS = 40;
option ℕ Y_EDGE_ELEMS = 40;

option ℕ maxIter = 200000;
option ℝ maxTime = 10.0;

let ℝ t = 0.0;
let ℝ δt = 0.01;
let ℝ v = 1.0; //vitesse de l'onde 

ℝ[2] X{nodes}, Xc{cells};
ℝ xc{cells}, yc{cells}; // Abscissa and ordinate of cells center of gravity so they can be plotted in vtk file
ℝ u{cells};
ℝ α{cells, cells}; //matrice du schema implicite 


iterate n while (n+1 < maxIter && t^{n+1} < maxTime);

InitXc: ∀c∈cells(), Xc{c} = 0.25 * ∑{p∈nodesOfCell(c)}(X{p});  // Only valid on parallelograms

InitXcAndYc: ∀c∈cells(), {
	xc{c} = Xc{c}[0]; 
	yc{c} = Xc{c}[1];
}


initU0: ∀c∈cells(), u^{n=0}{c} = fonction(x,y); 
// u(t=0, x, y) = f(x, y) = sin(wt - kx - ky) CONNU 

initU1: ∀c∈cells(), u^{n=1}{c} = F(u^{n=0}{c});
// u(t=0 + dt , x, y) = ? --> du/dt (0+dt, x, y) = g(x,y) CONNU --> schema numerique pour trouver u1 = f( dt, x , y, u0) implicite ou explicite 

ComputeAlphaCoeff: ∀c∈cells(), u^{n}{c} = 0.0;//remplir la matrice comme d'habitude

updateUn: ∀c∈cells(), u^{n} = solveLinearsystem(alpha, u^{n+1}) + f(u^{n-1});
//schema numerique implcite complet avec derive seconde en temps de type :   U^n = A . U^n+1 + U^n-1
//schema numerique explicite de type : U^n+1 = f(U^n, U^n-1)

UpdateTn: t^{n+1} = t^{n} + δt;